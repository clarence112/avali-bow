[gd_resource type="VisualShader" load_steps=28 format=3 uid="uid://u7sgcb1clop6"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_8gk6t"]
op_type = 0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_a35xm"]
output_port_for_preview = 0
size = Vector2(570.547, 905.374)
expression = "vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	
	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 h = (index_uv + neighbor);
			vec2 point = vec2(fract(sin(dot(h.xy, vec2(12.9898,78.233))) * 43758.5453123));
			
			float speed = 4.5;
			point = vec2( cos(time * point.x * speed), sin(time * point.y * speed) ) * 0.5 + 0.5;
			
			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			minimum_dist = min(minimum_dist, dist);
		}
	}
	
	output0 = minimum_dist;"

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_vu0q5"]
output_port_for_preview = 0
default_input_values = [0, 0.0, 1, 0.5, 2, 1e-05]
function = 3

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_g2s2m"]
output_port_for_preview = 0
default_input_values = [0, 0.0, 1, 0.5, 2, 1e-05]
function = 3

[sub_resource type="VisualShaderNodeIntOp" id="VisualShaderNodeIntOp_vhrkm"]
output_port_for_preview = 0
operator = 7

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_gmxjf"]
function = 3

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_ih4wp"]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeClamp" id="VisualShaderNodeClamp_3yx5y"]
output_port_for_preview = 0
default_input_values = [0, 0.0, 1, 0.0, 2, 0.8]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_re4lm"]
default_input_values = [0, 0.0, 1, 5.0]
operator = 3

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_f2wj2"]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_o8wlm"]
parameter_name = "intensity"
default_value_enabled = true
default_value = 3.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_03g4b"]
output_port_for_preview = 0
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_k57c0"]
input_name = "node_position_view"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_o33h4"]

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_c6nj1"]
default_input_values = [0, 0.0, 1, 1.45519e-11, 2, 0.1, 3, Vector3(1, 1, 1), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_0anw7"]

[sub_resource type="VisualShaderNodeVectorDistance" id="VisualShaderNodeVectorDistance_nxxvs"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(5, 5)]
op_type = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_odare"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_05iu2"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_1p0oc"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(10, 10)]
op_type = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_lihiu"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(2, 2)]
op_type = 0
operator = 3

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_7rmov"]
output_port_for_preview = 0
default_input_values = [0, 1.0, 1, 0.0]
operator = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_kot8o"]
output_port_for_preview = 0
size = Vector2(555.476, 857.148)
expression = "vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	
	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 h = (index_uv + neighbor);
			vec2 point = vec2(fract(sin(dot(h.xy, vec2(12.9898,78.233))) * 43758.5453123));
			
			float speed = 4.5;
			point = vec2( cos(time * point.x * speed), sin(time * point.y * speed) ) * 0.5 + 0.5;
			
			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			minimum_dist = min(minimum_dist, dist);
		}
	}
	
	output0 = minimum_dist;"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ym6wq"]
constant = 50.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_kiyit"]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_sthcx"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_82j6a"]
op_type = 0

[resource]
code = "shader_type spatial;
uniform float intensity = 3;



void fragment() {
// Input:2
	vec2 n_out2p0 = UV;


// FloatParameter:20
	float n_out20p0 = intensity;


// VectorOp:32
	vec2 n_out32p0 = n_out2p0 * vec2(n_out20p0);


// VectorOp:33
	vec2 n_in33p1 = vec2(2.00000, 2.00000);
	vec2 n_out33p0 = vec2(n_out20p0) / n_in33p1;


// Distance:3
	float n_out3p0 = distance(n_out32p0, n_out33p0);


// FloatOp:4
	float n_in4p0 = 1.00000;
	float n_out4p0 = n_in4p0 - n_out3p0;


// VectorDecompose:8
	float n_out8p0 = n_out2p0.x;
	float n_out8p1 = n_out2p0.y;


// VectorCompose:9
	float n_in9p1 = 0.00000;
	vec2 n_out9p0 = vec2(n_out8p0, n_in9p1);


// FloatConstant:6
	float n_out6p0 = 50.000000;


// Input:7
	float n_out7p0 = TIME;


// FloatOp:19
	float n_in19p1 = 5.00000;
	float n_out19p0 = n_out7p0 / n_in19p1;


	float n_out5p0;
// Expression:5
	n_out5p0 = 0.0;
	{
		vec2 index_uv = floor(vec2(n_out9p0.x * n_out6p0, n_out9p0.y * n_out6p0));
			vec2 fract_uv = fract(vec2(n_out9p0.x * n_out6p0, n_out9p0.y * n_out6p0));
			
			float minimum_dist = 1.0;  
			
			for (int y= -1; y <= 1; y++) {
				for (int x= -1; x <= 1; x++) {
					vec2 neighbor = vec2(float(x),float(y));
					vec2 h = (index_uv + neighbor);
					vec2 point = vec2(fract(sin(dot(h.xy, vec2(12.9898,78.233))) * 43758.5453123));
					
					float speed = 4.5;
					point = vec2( cos(n_out19p0 * point.x * speed), sin(n_out19p0 * point.y * speed) ) * 0.5 + 0.5;
					
					vec2 diff = neighbor + point - fract_uv;
					float dist = length(diff);
					minimum_dist = min(minimum_dist, dist);
				}
			}
			
			n_out5p0 = minimum_dist;
	}


// Compare:12
	float n_in12p1 = 0.50000;
	bool n_out12p0 = n_out5p0 >= n_in12p1;


// VectorCompose:10
	float n_in10p0 = 0.00000;
	vec2 n_out10p0 = vec2(n_in10p0, n_out8p1);


	float n_out11p0;
// Expression:11
	n_out11p0 = 0.0;
	{
		vec2 index_uv = floor(vec2(n_out10p0.x * n_out6p0, n_out10p0.y * n_out6p0));
			vec2 fract_uv = fract(vec2(n_out10p0.x * n_out6p0, n_out10p0.y * n_out6p0));
			
			float minimum_dist = 1.0;  
			
			for (int y= -1; y <= 1; y++) {
				for (int x= -1; x <= 1; x++) {
					vec2 neighbor = vec2(float(x),float(y));
					vec2 h = (index_uv + neighbor);
					vec2 point = vec2(fract(sin(dot(h.xy, vec2(12.9898,78.233))) * 43758.5453123));
					
					float speed = 4.5;
					point = vec2( cos(n_out19p0 * point.x * speed), sin(n_out19p0 * point.y * speed) ) * 0.5 + 0.5;
					
					vec2 diff = neighbor + point - fract_uv;
					float dist = length(diff);
					minimum_dist = min(minimum_dist, dist);
				}
			}
			
			n_out11p0 = minimum_dist;
	}


// Compare:13
	float n_in13p1 = 0.50000;
	bool n_out13p0 = n_out11p0 >= n_in13p1;


// IntOp:14
	int n_out14p0 = (n_out12p0 ? 1 : 0) & (n_out13p0 ? 1 : 0);


// Compare:15
	bool n_out15p0 = n_out4p0 >= float(n_out14p0);


// Clamp:17
	float n_in17p1 = 0.00000;
	float n_in17p2 = 0.80000;
	float n_out17p0 = clamp(n_out4p0, n_in17p1, n_in17p2);


	float n_out16p0;
// Switch:16
	n_out16p0 = mix(float(n_out14p0), n_out17p0, float(n_out15p0));


// Output:0
	ALPHA = n_out16p0;
	EMISSION = vec3(n_out16p0);


}
"
graph_offset = Vector2(-43.5793, 101.787)
nodes/fragment/0/position = Vector2(1080, 220)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_f2wj2")
nodes/fragment/2/position = Vector2(-1760, -520)
nodes/fragment/3/node = SubResource("VisualShaderNodeVectorDistance_nxxvs")
nodes/fragment/3/position = Vector2(-480, -340)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatOp_7rmov")
nodes/fragment/4/position = Vector2(-180, -340)
nodes/fragment/5/node = SubResource("VisualShaderNodeExpression_kot8o")
nodes/fragment/5/position = Vector2(-1200, -200)
nodes/fragment/5/size = Vector2(555.476, 857.148)
nodes/fragment/5/input_ports = "0,3,uv;1,0,columns;2,0,rows;3,0,time;"
nodes/fragment/5/output_ports = "0,0,output0;"
nodes/fragment/5/expression = "vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	
	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 h = (index_uv + neighbor);
			vec2 point = vec2(fract(sin(dot(h.xy, vec2(12.9898,78.233))) * 43758.5453123));
			
			float speed = 4.5;
			point = vec2( cos(time * point.x * speed), sin(time * point.y * speed) ) * 0.5 + 0.5;
			
			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			minimum_dist = min(minimum_dist, dist);
		}
	}
	
	output0 = minimum_dist;"
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatConstant_ym6wq")
nodes/fragment/6/position = Vector2(-1480, 80)
nodes/fragment/7/node = SubResource("VisualShaderNodeInput_kiyit")
nodes/fragment/7/position = Vector2(-2120, 160)
nodes/fragment/8/node = SubResource("VisualShaderNodeVectorDecompose_sthcx")
nodes/fragment/8/position = Vector2(-1800, -200)
nodes/fragment/9/node = SubResource("VisualShaderNodeVectorCompose_82j6a")
nodes/fragment/9/position = Vector2(-1540, -240)
nodes/fragment/10/node = SubResource("VisualShaderNodeVectorCompose_8gk6t")
nodes/fragment/10/position = Vector2(-1540, -100)
nodes/fragment/11/node = SubResource("VisualShaderNodeExpression_a35xm")
nodes/fragment/11/position = Vector2(-1200, 680)
nodes/fragment/11/size = Vector2(570.547, 905.374)
nodes/fragment/11/input_ports = "0,3,uv;1,0,columns;2,0,rows;3,0,time;"
nodes/fragment/11/output_ports = "0,0,output0;"
nodes/fragment/11/expression = "vec2 index_uv = floor(vec2(uv.x * columns, uv.y * rows));
	vec2 fract_uv = fract(vec2(uv.x * columns, uv.y * rows));
	
	float minimum_dist = 1.0;  
	
	for (int y= -1; y <= 1; y++) {
		for (int x= -1; x <= 1; x++) {
			vec2 neighbor = vec2(float(x),float(y));
			vec2 h = (index_uv + neighbor);
			vec2 point = vec2(fract(sin(dot(h.xy, vec2(12.9898,78.233))) * 43758.5453123));
			
			float speed = 4.5;
			point = vec2( cos(time * point.x * speed), sin(time * point.y * speed) ) * 0.5 + 0.5;
			
			vec2 diff = neighbor + point - fract_uv;
			float dist = length(diff);
			minimum_dist = min(minimum_dist, dist);
		}
	}
	
	output0 = minimum_dist;"
nodes/fragment/12/node = SubResource("VisualShaderNodeCompare_vu0q5")
nodes/fragment/12/position = Vector2(-520, 200)
nodes/fragment/13/node = SubResource("VisualShaderNodeCompare_g2s2m")
nodes/fragment/13/position = Vector2(-500, 580)
nodes/fragment/14/node = SubResource("VisualShaderNodeIntOp_vhrkm")
nodes/fragment/14/position = Vector2(-240, 300)
nodes/fragment/15/node = SubResource("VisualShaderNodeCompare_gmxjf")
nodes/fragment/15/position = Vector2(260, -80)
nodes/fragment/16/node = SubResource("VisualShaderNodeSwitch_ih4wp")
nodes/fragment/16/position = Vector2(460, 40)
nodes/fragment/17/node = SubResource("VisualShaderNodeClamp_3yx5y")
nodes/fragment/17/position = Vector2(120, 100)
nodes/fragment/19/node = SubResource("VisualShaderNodeFloatOp_re4lm")
nodes/fragment/19/position = Vector2(-1680, 160)
nodes/fragment/20/node = SubResource("VisualShaderNodeFloatParameter_o8wlm")
nodes/fragment/20/position = Vector2(-1200, -340)
nodes/fragment/21/node = SubResource("VisualShaderNodeInput_03g4b")
nodes/fragment/21/position = Vector2(-260, 840)
nodes/fragment/26/node = SubResource("VisualShaderNodeInput_k57c0")
nodes/fragment/26/position = Vector2(-220, 1120)
nodes/fragment/27/node = SubResource("VisualShaderNodeVectorOp_o33h4")
nodes/fragment/27/position = Vector2(220, 860)
nodes/fragment/28/node = SubResource("VisualShaderNodeIf_c6nj1")
nodes/fragment/28/position = Vector2(740, 800)
nodes/fragment/29/node = SubResource("VisualShaderNodeVectorDecompose_0anw7")
nodes/fragment/29/position = Vector2(520, 900)
nodes/fragment/30/node = SubResource("VisualShaderNodeVectorDecompose_odare")
nodes/fragment/30/position = Vector2(160, 1140)
nodes/fragment/31/node = SubResource("VisualShaderNodeVectorCompose_05iu2")
nodes/fragment/31/position = Vector2(400, 1140)
nodes/fragment/32/node = SubResource("VisualShaderNodeVectorOp_1p0oc")
nodes/fragment/32/position = Vector2(-880, -460)
nodes/fragment/33/node = SubResource("VisualShaderNodeVectorOp_lihiu")
nodes/fragment/33/position = Vector2(-647.291, -273.886)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 1, 6, 0, 5, 1, 6, 0, 5, 2, 2, 0, 8, 0, 8, 0, 9, 0, 8, 1, 10, 1, 9, 0, 5, 0, 10, 0, 11, 0, 6, 0, 11, 1, 6, 0, 11, 2, 5, 0, 12, 0, 11, 0, 13, 0, 12, 0, 14, 0, 13, 0, 14, 1, 14, 0, 15, 1, 15, 0, 16, 0, 14, 0, 16, 2, 7, 0, 19, 0, 19, 0, 5, 3, 19, 0, 11, 3, 21, 0, 27, 0, 27, 0, 29, 0, 29, 2, 28, 0, 26, 0, 30, 0, 30, 0, 31, 2, 31, 0, 27, 1, 2, 0, 32, 0, 32, 0, 3, 0, 4, 0, 15, 0, 20, 0, 32, 1, 20, 0, 33, 0, 33, 0, 3, 1, 4, 0, 17, 0, 17, 0, 16, 1, 16, 0, 0, 1, 16, 0, 0, 5)
